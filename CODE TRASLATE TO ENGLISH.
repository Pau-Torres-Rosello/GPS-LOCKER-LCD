//Library for I2C communication.
#include <Wire.h>

//Library to have control of the LCD display.
#include <LiquidCrystal_I2C.h>

//Library for the connection of the different satellites and to give us
//of our coordinates.
#include <TinyGPS++.h>

//Library for WIFI connection between the device and the mobile phone 
// and the mobile.
#include <WiFi.h>

//Library for the operation of the website.
#include <WebServer.h>

//PINs used to receive the data
//from the NEO-6M antenna.
#define RXD2 16
#define TXD2 17
HardwareSerial neogps(1);
char datoCmd = 0;
#define NMEA 0


//Start GPS.
TinyGPSPlus gps;

//WIFI / PASSWORD.
const char* ssid = "GPS-LOCKER";
const char* password = "12345678";

bool wifiConectado = false; // Flag to track the WiFi connection status.


//Start the Server of the 
//website.
WebServer server(80);

// Initialize the I2C LCD object.
LiquidCrystal_I2C lcd(0x27, 20, 4); // I2C address, 20 columns, 4 rows.

void setup() {
  //Initialize the lcd.
  lcd.begin();
  lcd.backlight(); // Turn on LCD backlighting.
  Serial.begin(115200);
  
  // Initializing the Satellite Antenna.
  neogps.begin(9600, SERIAL_8N1, RXD2, TXD2);
  
  delay(2000);

	// WiFi Network Connection Checker.
	WiFi.begin(ssid, password);
  Serial.println("Conectando a la red WiFi...");
  lcd.print("CONECTANDO A LA RED WIFI ESPERE...");

  // Timer for WIFI connection.
  unsigned long tiempoInicio = millis(); // Get current time
  
  // Wait up to 20 seconds for WiFi connection, Yes 
  // No connection, nothing happens because the data
  // It will be given in the WEB - LCD I2C.

  while (millis() - tiempoInicio < 20000) { 
    if (WiFi.status() == WL_CONNECTED) {
      wifiConectado = true;
      break;
    }
    delay(1000);
    Serial.println("Conectando...");
  }

   // Successful connection on the WIFI and gives 
   // the IP of the server for the web.
  if (wifiConectado) {
    Serial.println("Conexión exitosa");
    Serial.print("Dirección IP asignada: ");
    Serial.println(WiFi.localIP());
    lcd.clear();
    lcd.setCursor(0, 0); // Set cursor to row 1, column 1.
    lcd.print("BUSCA LA IP EN EL   ");
    lcd.setCursor(0, 1); // Set cursor to row 2, column 1.
    lcd.print("NAVEGADOR WEB");
    lcd.setCursor(0, 2); // Set cursor in row 3, column 1.
    lcd.print(WiFi.localIP());
    delay(7000);

   
  } else {
		// Baner that will pop up on the LCD saying that it cannot connect 
		// to the NETWORK and will start the GPS antenna.
    Serial.println("Error: No se pudo conectar a la red WiFi");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("NO HEMOS PODIDO     CONECTAR A INTERNET ");
    
  }

  // Web configuration for HTML5.
server.on("/", HTTP_GET, []() {
    String content = "<html><head><title>ESP32 GPS</title>";
    content += "<meta charset=\"utf-8\">"; // Setting the character encoding.
    content += "<script src=\"https://maps.googleapis.com/maps/api/js?key=API"></script>";//KEY API GOOGLE.
    content += "<script>function initMap() {var map = new google.maps.Map(document.getElementById('map'), {zoom: 70, center: {lat: "; //WEB DATA.
    content += String(gps.location.lat(), 40);
    content += ", lng: ";
    content += String(gps.location.lng(), 40);
    content += "}, mapTypeId: 'satellite'});"; // Change the map type to satellite.
    content += "var marker = new google.maps.Marker({position: {lat: ";
    content += String(gps.location.lat(), 40);
    content += ", lng: ";
    content += String(gps.location.lng(), 40);
    content += "}, map: map});}</script>";
    content += "<script>setTimeout(function(){ location.reload(); }, 15000);</script>"; // Reload the page every 15 seconds to our coordinates.
    content += "<style>";
    content += "body {";
    content += "background: -webkit-linear-gradient(90deg, #06071d,#06071d,#1a1f8d,#5a60e0,#d4d6fa);"; // Background colors.
    content += "background: linear-gradient(90deg, #06071d,#06071d,#1a1f8d,#5a60e0,#d4d6fa);"; // Background colors.
    content += "color: white;";
    content += "text-align: center;";
    content += "}"; // Gradient background and white text centered.

    //PARAMETERS FOR PRIVATE GOOGLE MAPS 
		// API MAPPING.
    content += "#map { height: 80vh; width: 100%; }"; // Style for the map that occupies 70% of the screen height and the entire width of the screen.
    content += "h1 { font-weight: bold; color: orange; }"; // Style to make text bold in headings and change color to orange.
    content += "p { font-weight: bold; }"; // Style to make text bold in paragraphs.
    content += "</style>";
    content += "</head><body onload=\"initMap()\"><h1>LOCALIZACIÓN DE LA UBICACION TRACKER</h1>";
    content += "<p>Latitud: ";
    content += gps.location.lat(), 40;
    content += " Km/h</p><p>Longitud: ";
    content += gps.location.lng(), 40;
    content += "</p><p>Velocidad: ";
    content += gps.speed.kmph();
    content += " Km/h</p><p>Satélites: ";
    content += gps.satellites.value();
    content += "</p><p>Altitud: ";
    content += gps.altitude.meters();
    content += " m</p><p>Fecha: ";
    content += gps.date.year();
    content += "/";
    content += gps.date.month();
    content += "/";
    content += gps.date.day();
    content += "</p>"; // Removed the time section.
    content += "<div id=\"map\"></div></body></html>";
    server.send(200, "text/html", content);
});


  // Start Server.
  server.begin();
  Serial.println("Servidor iniciado");
}

void loop() {
  // SATELLITE OPERATION
  // TO RECEIVE AND SEND DATA.
  
  if (NMEA) {
    while (neogps.available()) {
      datoCmd = (char)neogps.read();
      Serial.print(datoCmd);
    }
  } else {
    boolean newData = false;
    for (unsigned long start = millis(); millis() - start < 10000;) {
      while (neogps.available()) {
        if (gps.encode(neogps.read())) {
          newData = true;
        }
      }
    }

    if (newData == true) {
      newData = false;
      Serial.println(gps.satellites.value());
      Visualizacion_Serial();
    }
  }

  // Handle web page requests
  server.handleClient();
}
//Function to control the LCD I2C.
void Visualizacion_Serial(void) {
  if (gps.location.isValid() == 1) {
    // Display on the LCD 
    // The different values “”.
    lcd.clear(); // Limpiar la pantalla
    lcd.setCursor(0, 0);
    lcd.print("LATITUD: ");
    lcd.print(gps.location.lat(), 6);

    lcd.setCursor(0, 1);
    lcd.print("LONGITUD: ");
    lcd.print(gps.location.lng(), 6);

    lcd.setCursor(0, 2);
    lcd.print("VELOCIDAD: ");
    lcd.print(gps.speed.kmph());

    lcd.setCursor(0, 3);
    lcd.print("SATELITES: ");
    lcd.print(gps.satellites.value());
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("NO DETECTAMOS GPS ");
  }
}
